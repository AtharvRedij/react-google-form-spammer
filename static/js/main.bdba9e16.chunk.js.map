{"version":3,"sources":["components/URLBox.js","components/SpamCountSelector.js","components/ErrorBox.js","components/FormInfoBox.js","utils.js","App.js","index.js"],"names":["EX_URL","URLBox","setGoogleFormURL","fetchingForm","fetchForm","className","htmlFor","InputGroup","FormControl","placeholder","aria-label","aria-describedby","id","onChange","e","target","value","Append","Button","variant","disabled","onClick","Spinner","as","animation","size","role","aria-hidden","SpamCountSelector","spamCount","setSpamCount","startSpamming","style","textAlign","type","min","max","count","Number","ErrorBox","message","Alert","Heading","FormInfoBox","formName","questions","length","map","q","getRandomText","result","characters","charactersLength","i","charAt","Math","floor","random","fetchAndProcessData","url","a","fetch","res","ok","Error","text","htmlStr","data","JSON","parse","split","formID","console","log","genrateAnswers","answers","push","optionsArray","option","submitResponse","queryString","encodeURIComponent","opts","method","mode","redirect","referrer","App","useState","googleFormURL","setFetchingForm","errorMessage","setErrorMessage","setFormID","setFormName","setQuestions","spammingProgress","setSpammingProgress","ceil","Container","ProgressBar","height","fontSize","animated","now","label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdba9e16.chunk.js","sourcesContent":["import React from \"react\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nconst EX_URL =\r\n  \"https://docs.google.com/forms/d/e/1FAIpQLSc_h1Sikcje0eXRNoPp0e41EKBBCXKRVzby0k5EWXaWjzPOhg/viewform\";\r\n\r\nconst URLBox = ({ setGoogleFormURL, fetchingForm, fetchForm }) => {\r\n  return (\r\n    <div>\r\n      <label className=\"mx-auto my-3\" htmlFor=\"google-form-url\">\r\n        <h3>Enter Google Form URL</h3>\r\n      </label>\r\n\r\n      <InputGroup className=\"mx-auto\">\r\n        <FormControl\r\n          placeholder={`For example ${EX_URL}`}\r\n          aria-label={`For example ${EX_URL}`}\r\n          aria-describedby=\"basic-addon2\"\r\n          id=\"google-form-url\"\r\n          onChange={(e) => setGoogleFormURL(e.target.value)}\r\n        />\r\n        <InputGroup.Append>\r\n          <Button\r\n            variant=\"primary\"\r\n            disabled={fetchingForm}\r\n            onClick={() => fetchForm()}\r\n          >\r\n            <Spinner\r\n              as=\"span\"\r\n              animation={fetchingForm ? \"border\" : \"false\"}\r\n              size=\"sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            />\r\n            {` `}\r\n            {fetchingForm ? \"Anaylzing\" : \"Fetch\"}\r\n          </Button>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default URLBox;\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst SpamCountSelector = ({ spamCount, setSpamCount, startSpamming }) => {\r\n  return (\r\n    <div>\r\n      <label className=\"mx-auto my-3\" htmlFor=\"spam-count\">\r\n        <h3>Select Number of Spam Entries to Add</h3>\r\n      </label>\r\n\r\n      <div className=\"d-flex align-items-center\">\r\n        <Button\r\n          variant=\"primary\"\r\n          disabled={spamCount <= 1}\r\n          onClick={() => {\r\n            if (spamCount > 1) {\r\n              setSpamCount(spamCount - 1);\r\n            }\r\n          }}\r\n        >\r\n          -\r\n        </Button>\r\n        <input\r\n          className=\"mx-3\"\r\n          style={{ textAlign: \"center\" }}\r\n          type=\"number\"\r\n          min=\"1\"\r\n          max=\"100\"\r\n          value={spamCount}\r\n          onChange={(e) => {\r\n            var count = Number(e.target.value);\r\n            if (count < 1 || count > 100) {\r\n              setSpamCount(10);\r\n            } else {\r\n              setSpamCount(count);\r\n            }\r\n          }}\r\n        />\r\n        <Button\r\n          variant=\"primary\"\r\n          disabled={spamCount >= 100}\r\n          onClick={() => {\r\n            if (spamCount < 100) {\r\n              setSpamCount(spamCount + 1);\r\n            }\r\n          }}\r\n        >\r\n          +\r\n        </Button>\r\n\r\n        <Button className=\"ml-5\" onClick={startSpamming}>\r\n          Start Spamming\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpamCountSelector;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ErrorBox = ({ message }) => {\r\n  return (\r\n    <Alert variant=\"danger\" className=\"mx-auto my-3\">\r\n      <Alert.Heading>Something Went Wrong :'(</Alert.Heading>\r\n      <p>{`Error Message: ${message}`}</p>\r\n      <hr />\r\n      <p>\r\n        Please check the URL. If error persists, refresh the page or try again\r\n        later.\r\n      </p>\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ErrorBox;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst FormInfoBox = ({ formName, questions }) => {\r\n  return (\r\n    <Alert variant=\"success\" className=\"mx-auto my-3\">\r\n      <Alert.Heading>{`Form Name - ${formName}`}</Alert.Heading>\r\n\r\n      <p>{`${questions.length} question(s) can be spammed`}</p>\r\n\r\n      <ol>\r\n        {questions.map((q, id) => (\r\n          <li key={id}>{q[1]}</li>\r\n        ))}\r\n      </ol>\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default FormInfoBox;\r\n","// Supported Types\r\n// Short Answer Field = 0\r\n// Paragraph Field = 1,\r\n// Multiple Choice Field = 2\r\n// Drop Down Field = 3\r\n// Check Boxes Field = 4\r\n\r\n// genrates random text for text based fields\r\nconst getRandomText = (length = 10) => {\r\n  var result = \"\";\r\n  var characters =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n  var charactersLength = characters.length;\r\n  for (var i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n};\r\n\r\n// fetches form and returns => formID, formName, questions\r\nexport const fetchAndProcessData = async (url) => {\r\n  const proxyurl = \"https://thingproxy.freeboard.io/fetch/\";\r\n\r\n  try {\r\n    const res = await fetch(proxyurl + url);\r\n\r\n    if (!res.ok) {\r\n      throw Error(\"Failed to fetch the form\");\r\n    }\r\n\r\n    const htmlStr = await res.text();\r\n    const data = JSON.parse(\r\n      htmlStr.split(\"var FB_PUBLIC_LOAD_DATA_ = \")[1].split(\";\")[0]\r\n    );\r\n\r\n    const formID = data[14].split(\"/\")[1];\r\n    const formName = data[3];\r\n    const questions = data[1][1];\r\n\r\n    return [formID, formName, questions];\r\n  } catch (err) {\r\n    console.log(err);\r\n    return err.message;\r\n  }\r\n};\r\n\r\n// genrates answers\r\nexport const genrateAnswers = (questions) => {\r\n  const answers = [];\r\n\r\n  for (var i = 0; i < questions.length; i++) {\r\n    // text based\r\n    if (questions[i][3] === 0 || questions[i][3] === 1) {\r\n      answers.push([questions[i][4][0][0], getRandomText()]);\r\n    }\r\n    // option based\r\n    else if (\r\n      questions[i][3] === 2 ||\r\n      questions[i][3] === 3 ||\r\n      questions[i][3] === 4\r\n    ) {\r\n      const optionsArray = questions[i][4][0][1];\r\n      const option =\r\n        optionsArray[Math.floor(Math.random() * optionsArray.length)];\r\n      answers.push([questions[i][4][0][0], option[0]]);\r\n    }\r\n  }\r\n\r\n  return answers;\r\n};\r\n\r\n// submit response to google form\r\nexport const submitResponse = async (formID, answers) => {\r\n  var queryString = \"/formResponse?usp=pp_url\";\r\n\r\n  for (var i = 0; i < answers.length; i++) {\r\n    queryString += `&entry.${answers[i][0]}=${encodeURIComponent(\r\n      answers[i][1]\r\n    )}`;\r\n  }\r\n\r\n  queryString += \"&submit=SUBMIT\";\r\n\r\n  var url = \"https://docs.google.com/forms/d/e/\" + formID + queryString;\r\n\r\n  var opts = {\r\n    method: \"POST\",\r\n    mode: \"no-cors\",\r\n    redirect: \"follow\",\r\n    referrer: \"no-referrer\",\r\n  };\r\n\r\n  return await fetch(url, opts);\r\n};\r\n","import React, { useState } from \"react\";\n\n// my components\nimport URLBox from \"./components/URLBox\";\nimport SpamCountSelector from \"./components/SpamCountSelector\";\nimport ErrorBox from \"./components/ErrorBox\";\nimport FormInfoBox from \"./components/FormInfoBox\";\n\n// bootstrap components\nimport Container from \"react-bootstrap/Container\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\n\n// utility functions\nimport { fetchAndProcessData, genrateAnswers, submitResponse } from \"./utils\";\n\nconst App = () => {\n  const [googleFormURL, setGoogleFormURL] = useState(\"\");\n  const [fetchingForm, setFetchingForm] = useState(false);\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const [formID, setFormID] = useState(\"\");\n  const [formName, setFormName] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n\n  const [spamCount, setSpamCount] = useState(1);\n  const [spammingProgress, setSpammingProgress] = useState(0);\n\n  const fetchForm = async () => {\n    setFetchingForm(true);\n    setErrorMessage(\"\");\n    setFormID(\"\");\n\n    const result = await fetchAndProcessData(googleFormURL);\n    if (typeof result === \"string\") {\n      setErrorMessage(result);\n    } else {\n      const [formID, formName, questions] = result;\n\n      setFormID(formID);\n      setFormName(formName);\n      setQuestions(questions);\n    }\n\n    setFetchingForm(false);\n  };\n\n  const startSpamming = async () => {\n    for (var i = 1; i <= spamCount; i++) {\n      await submitResponse(formID, genrateAnswers(questions));\n\n      setSpammingProgress(Math.ceil((i / spamCount) * 100));\n    }\n  };\n\n  return (\n    <Container>\n      <URLBox\n        setGoogleFormURL={setGoogleFormURL}\n        fetchingForm={fetchingForm}\n        fetchForm={fetchForm}\n      />\n\n      {errorMessage && <ErrorBox message={errorMessage} />}\n      {formID && <FormInfoBox formName={formName} questions={questions} />}\n\n      {formID && (\n        <SpamCountSelector\n          spamCount={spamCount}\n          setSpamCount={setSpamCount}\n          startSpamming={startSpamming}\n        />\n      )}\n      {spammingProgress !== 0 && (\n        <ProgressBar\n          style={{ height: \"30px\", fontSize: \"20px\" }}\n          className=\"mx-1 mt-3\"\n          animated\n          variant=\"success\"\n          now={spammingProgress}\n          label={`${spammingProgress}% Complete`}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}